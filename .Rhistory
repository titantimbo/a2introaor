)
# Processando os dados
DF <- data %>%
arrange(date) %>%
group_by(estado) %>%
mutate(
final_lula_lead = lula_lead[which.max(date)],
delta = lula_lead - final_lula_lead
) %>%
ungroup()
# Definindo limites consistentes para a escala de cores
max_abs_delta <- max(abs(DF$delta), na.rm = TRUE)
delta_limits <- c(-max_abs_delta, max_abs_delta)
# Carregando o shapefile dos estados do Brasil
brazil_states <- ne_states(country = "Brazil", returnclass = "sf") %>%
mutate(estado = toupper(stri_trans_general(name, "Latin-ASCII")))
# Função para gerar os mapas
generate_map <- function(DF, time_label, time_cutoff, delta_limits) {
DF_time <- DF %>%
mutate(estado = toupper(stri_trans_general(estado, "Latin-ASCII"))) %>%
group_by(estado) %>%
filter(date >= as.POSIXct(time_cutoff)) %>%
filter(date == min(date)) %>%
ungroup()
brazil_map_data <- brazil_states %>%
left_join(DF_time, by = "estado")
plot <- ggplot(data = brazil_map_data) +
geom_sf(aes(fill = delta, text = paste0("Estado: ", estado, "<br>",
"Desvio: ", sprintf("%.2f%%", delta * 100)))) +
scale_fill_gradient2(
limits = delta_limits,
low = "lightgreen",
mid = "white",
high = "red",
midpoint = 0,
na.value = "grey90",
name = "Desvio (%)"
) +
theme_minimal() +
labs(
title = paste0("Desvio da % Lula final (", time_label, " de apuração)")
) +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
)
ggplotly(plot, tooltip = "text")
}
# Gerando os mapas
generate_map(DF, "30 minutos", "2022-10-30 17:30:00", delta_limits)
generate_map(DF, "1 hora", "2022-10-30 18:00:00", delta_limits)
generate_map(DF, "2 horas", "2022-10-30 19:00:00", delta_limits)
generate_map(DF, "3 horas", "2022-10-30 20:00:00", delta_limits)
data
# Processando os dados
DF <- data %>%
arrange(date) %>%
group_by(estado) %>%
mutate(
final_lula_lead = lula_lead[which.max(date)],
delta = lula_lead - final_lula_lead
) %>%
ungroup() %>%
drop_na()
DF
# Definindo limites consistentes para a escala de cores
max_abs_delta <- max(abs(DF$delta), na.rm = TRUE)
delta_limits <- c(-max_abs_delta, max_abs_delta)
# Carregando o shapefile dos estados do Brasil
brazil_states <- ne_states(country = "Brazil", returnclass = "sf") %>%
mutate(estado = toupper(stri_trans_general(name, "Latin-ASCII")))
# Função para gerar os mapas
generate_map <- function(DF, time_label, time_cutoff, delta_limits) {
DF_time <- DF %>%
mutate(estado = toupper(stri_trans_general(estado, "Latin-ASCII"))) %>%
group_by(estado) %>%
filter(date >= as.POSIXct(time_cutoff)) %>%
filter(date == min(date)) %>%
ungroup()
brazil_map_data <- brazil_states %>%
left_join(DF_time, by = "estado")
plot <- ggplot(data = brazil_map_data) +
geom_sf(aes(fill = delta, text = paste0("Estado: ", estado, "<br>",
"Desvio: ", sprintf("%.2f%%", delta * 100)))) +
scale_fill_gradient2(
limits = delta_limits,
low = "lightgreen",
mid = "white",
high = "red",
midpoint = 0,
na.value = "grey90",
name = "Desvio (%)"
) +
theme_minimal() +
labs(
title = paste0("Desvio da % Lula final (", time_label, " de apuração)")
) +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
)
ggplotly(plot, tooltip = "text")
}
# Gerando os mapas
generate_map(DF, "30 minutos", "2022-10-30 17:30:00", delta_limits)
generate_map(DF, "1 hora", "2022-10-30 18:00:00", delta_limits)
generate_map(DF, "2 horas", "2022-10-30 19:00:00", delta_limits)
generate_map(DF, "3 horas", "2022-10-30 20:00:00", delta_limits)
# Função para gerar os mapas
generate_map <- function(DF, time_label, time_cutoff, delta_limits) {
browser()
DF_time <- DF %>%
mutate(estado = toupper(stri_trans_general(estado, "Latin-ASCII"))) %>%
group_by(estado) %>%
filter(date >= as.POSIXct(time_cutoff)) %>%
filter(date == min(date)) %>%
ungroup()
brazil_map_data <- brazil_states %>%
left_join(DF_time, by = "estado")
plot <- ggplot(data = brazil_map_data) +
geom_sf(aes(fill = delta, text = paste0("Estado: ", estado, "<br>",
"Desvio: ", sprintf("%.2f%%", delta * 100)))) +
scale_fill_gradient2(
limits = delta_limits,
low = "lightgreen",
mid = "white",
high = "red",
midpoint = 0,
na.value = "grey90",
name = "Desvio (%)"
) +
theme_minimal() +
labs(
title = paste0("Desvio da % Lula final (", time_label, " de apuração)")
) +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
)
ggplotly(plot, tooltip = "text")
}
# Gerando os mapas
generate_map(DF, "30 minutos", "2022-10-30 17:30:00", delta_limits)
DF_time
DF_time <- DF %>%
mutate(estado = toupper(stri_trans_general(estado, "Latin-ASCII"))) %>%
group_by(estado) %>%
filter(date >= as.POSIXct(time_cutoff)) %>%
filter(date == min(date)) %>%
ungroup()
DF_time
# Função para gerar os mapas
generate_map <- function(DF, time_label, time_cutoff, delta_limits) {
DF_time <- DF %>%
mutate(estado = toupper(stri_trans_general(estado, "Latin-ASCII"))) %>%
group_by(estado) %>%
filter(date >= as.POSIXct(time_cutoff)) %>%
filter(date == min(date)) %>%
ungroup()
brazil_map_data <- brazil_states %>%
left_join(DF_time, by = "estado")
plot <- ggplot(data = brazil_map_data) +
geom_sf(aes(fill = delta, text = paste0("Estado: ", estado, "<br>",
"Desvio: ", sprintf("%.2f%%", delta * 100)))) +
scale_fill_gradient2(
limits = delta_limits,
low = "lightgreen",
mid = "white",
high = "red",
midpoint = 0,
na.value = "grey90",
name = "Desvio (%)"
) +
theme_minimal() +
labs(
title = paste0("Desvio da % Lula final (", time_label, " de apuração)")
) +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
)
ggplotly(plot, tooltip = "text")
}
# Gerando os mapas
generate_map(DF, "30 minutos", "2022-10-30 14:30:00", delta_limits)
generate_map(DF, "1 hora", "2022-10-30 15:00:00", delta_limits)
generate_map(DF, "2 horas", "2022-10-30 16:00:00", delta_limits)
generate_map(DF, "3 horas", "2022-10-30 17:00:00", delta_limits)
max_abs_delta
# Definindo limites consistentes para a escala de cores
max_abs_delta <- 0.3
delta_limits <- c(-max_abs_delta, max_abs_delta)
# Carregando o shapefile dos estados do Brasil
brazil_states <- ne_states(country = "Brazil", returnclass = "sf") %>%
mutate(estado = toupper(stri_trans_general(name, "Latin-ASCII")))
# Função para gerar os mapas
generate_map <- function(DF, time_label, time_cutoff, delta_limits) {
DF_time <- DF %>%
mutate(estado = toupper(stri_trans_general(estado, "Latin-ASCII"))) %>%
group_by(estado) %>%
filter(date >= as.POSIXct(time_cutoff)) %>%
filter(date == min(date)) %>%
ungroup()
brazil_map_data <- brazil_states %>%
left_join(DF_time, by = "estado")
plot <- ggplot(data = brazil_map_data) +
geom_sf(aes(fill = delta, text = paste0("Estado: ", estado, "<br>",
"Desvio: ", sprintf("%.2f%%", delta * 100)))) +
scale_fill_gradient2(
limits = delta_limits,
low = "lightgreen",
mid = "white",
high = "red",
midpoint = 0,
na.value = "grey90",
name = "Desvio (%)"
) +
theme_minimal() +
labs(
title = paste0("Desvio da % Lula final (", time_label, " de apuração)")
) +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
)
ggplotly(plot, tooltip = "text")
}
# Gerando os mapas
generate_map(DF, "30 minutos", "2022-10-30 14:30:00", delta_limits)
generate_map(DF, "1 hora", "2022-10-30 15:00:00", delta_limits)
generate_map(DF, "2 horas", "2022-10-30 16:00:00", delta_limits)
generate_map(DF, "3 horas", "2022-10-30 17:00:00", delta_limits)
plot1 <- generate_map(DF, "30 minutos", "2022-10-30 14:30:00", delta_limits)
plot2 <- generate_map(DF, "1 hora", "2022-10-30 15:00:00", delta_limits)
plot3 <- generate_map(DF, "2 horas", "2022-10-30 16:00:00", delta_limits)
plot4 <- generate_map(DF, "3 horas", "2022-10-30 17:00:00", delta_limits)
# Função para gerar os mapas
generate_map <- function(DF, time_label, time_cutoff, delta_limits) {
DF_time <- DF %>%
mutate(estado = toupper(stri_trans_general(estado, "Latin-ASCII"))) %>%
group_by(estado) %>%
filter(date >= as.POSIXct(time_cutoff)) %>%
filter(date == min(date)) %>%
ungroup()
brazil_map_data <- brazil_states %>%
left_join(DF_time, by = "estado")
plot <- ggplot(data = brazil_map_data) +
geom_sf(aes(fill = delta, text = paste0("Estado: ", estado, "<br>",
"Desvio: ", sprintf("%.2f%%", delta * 100)))) +
scale_fill_gradient2(
limits = delta_limits,
low = "lightgreen",
mid = "white",
high = "red",
midpoint = 0,
na.value = "grey90",
name = "Desvio (%)"
) +
theme_minimal() +
labs(
title = paste0("Desvio da % Lula final (", time_label, " de apuração)")
) +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
)
ggplotly(plot, tooltip = "text") %>%
layout(margin = list(l = 0, r = 0, b = 0, t = 30))
}
# Gerando os mapas
plot1 <- generate_map(DF, "30 minutos", "2022-10-30 14:30:00", delta_limits)
plot2 <- generate_map(DF, "1 hora", "2022-10-30 15:00:00", delta_limits)
plot3 <- generate_map(DF, "2 horas", "2022-10-30 16:00:00", delta_limits)
plot4 <- generate_map(DF, "3 horas", "2022-10-30 17:00:00", delta_limits)
legend_plot <- ggplot(data = brazil_states) +
geom_sf(aes(fill = delta)) +
scale_fill_gradient2(
limits = delta_limits,
low = "lightgreen",
mid = "white",
high = "red",
midpoint = 0,
na.value = "grey90",
name = "Desvio (%)"
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)
)
legend <- ggplotly(legend_plot)$x$layout$annotations[[1]]
brazil_states
#| echo: FALSE
#| message: FALSE
#| warning: FALSE
library(sf)
library(ggplot2)
library(plotly)
library(rnaturalearth)
library(rnaturalearthdata)
library(stringi)
# Carregando os dados
data <- fread("votos_por_candidato.csv") %>%
as_tibble() %>%
select(date, estado, cand, votos) %>%
pivot_wider(names_from = cand, values_from = votos) %>%
mutate(
date = as.POSIXct(date, format="%Y-%m-%d %H:%M:%S"),
Lula_pct = Lula / (Bolsonaro + Lula),
Bolsonaro_pct = Bolsonaro / (Bolsonaro + Lula),
lula_lead = Lula_pct - Bolsonaro_pct
)
# Processando os dados
DF <- data %>%
arrange(date) %>%
group_by(estado) %>%
mutate(
final_lula_lead = lula_lead[which.max(date)],
delta = lula_lead - final_lula_lead
) %>%
ungroup()
# Definindo limites consistentes para a escala de cores
max_abs_delta <- max(abs(DF$delta), na.rm = TRUE)
delta_limits <- c(-max_abs_delta, max_abs_delta)
# Carregando o shapefile dos estados do Brasil
brazil_states <- ne_states(country = "Brazil", returnclass = "sf") %>%
mutate(estado = toupper(stri_trans_general(name, "Latin-ASCII")))
# Função para gerar os mapas
generate_map <- function(DF, time_label, time_cutoff, delta_limits) {
DF_time <- DF %>%
mutate(estado = toupper(stri_trans_general(estado, "Latin-ASCII"))) %>%
group_by(estado) %>%
filter(date >= as.POSIXct(time_cutoff)) %>%
filter(date == min(date)) %>%
ungroup()
brazil_map_data <- brazil_states %>%
left_join(DF_time, by = "estado")
plot <- ggplot(data = brazil_map_data) +
geom_sf(aes(fill = delta, text = paste0("Estado: ", estado, "<br>",
"Desvio: ", sprintf("%.2f%%", delta * 100)))) +
scale_fill_gradient2(
limits = delta_limits,
low = "lightgreen",
mid = "white",
high = "red",
midpoint = 0,
na.value = "grey90",
name = "Desvio (%)"
) +
theme_void() +
labs(
title = paste0(time_label, " de apuração")
) +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 10)
)
ggplotly(plot, tooltip = "text") %>%
layout(margin = list(l = 0, r = 0, b = 0, t = 30))
}
# Gerando os mapas
plot1 <- generate_map(DF, "30 minutos", "2022-10-30 14:30:00", delta_limits)
plot2 <- generate_map(DF, "1 hora", "2022-10-30 15:00:00", delta_limits)
plot3 <- generate_map(DF, "2 horas", "2022-10-30 16:00:00", delta_limits)
plot4 <- generate_map(DF, "3 horas", "2022-10-30 17:00:00", delta_limits)
legend_plot <- ggplot(data = brazil_states) +
geom_sf(aes(fill = delta)) +
scale_fill_gradient2(
limits = delta_limits,
low = "lightgreen",
mid = "white",
high = "red",
midpoint = 0,
na.value = "grey90",
name = "Desvio (%)"
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)
)
legend <- ggplotly(legend_plot)$x$layout$annotations[[1]]
brazil_states
brazil_map_data
#| echo: FALSE
#| message: FALSE
#| warning: FALSE
library(sf)
library(ggplot2)
library(plotly)
library(rnaturalearth)
library(rnaturalearthdata)
library(stringi)
# Carregando os dados
data <- fread("votos_por_candidato.csv") %>%
as_tibble() %>%
select(date, estado, cand, votos) %>%
pivot_wider(names_from = cand, values_from = votos) %>%
mutate(
date = as.POSIXct(date, format="%Y-%m-%d %H:%M:%S"),
Lula_pct = Lula / (Bolsonaro + Lula),
Bolsonaro_pct = Bolsonaro / (Bolsonaro + Lula),
lula_lead = Lula_pct - Bolsonaro_pct
)
# Processando os dados
DF <- data %>%
arrange(date) %>%
group_by(estado) %>%
mutate(
final_lula_lead = lula_lead[which.max(date)],
delta = lula_lead - final_lula_lead
) %>%
ungroup()
# Definindo limites consistentes para a escala de cores
max_abs_delta <- max(abs(DF$delta), na.rm = TRUE)
delta_limits <- c(-max_abs_delta, max_abs_delta)
# Carregando o shapefile dos estados do Brasil
brazil_states <- ne_states(country = "Brazil", returnclass = "sf") %>%
mutate(estado = toupper(stri_trans_general(name, "Latin-ASCII")))
# Criando brazil_map_data fora da função para uso no legend_plot
# Vamos usar o primeiro tempo disponível para 'delta'
DF_initial <- DF %>%
mutate(estado = toupper(stri_trans_general(estado, "Latin-ASCII"))) %>%
group_by(estado) %>%
filter(date == min(date)) %>%
ungroup()
brazil_map_data <- brazil_states %>%
left_join(DF_initial, by = "estado")
# Função para gerar os mapas
generate_map <- function(brazil_map_data, time_label, time_cutoff, delta_limits) {
DF_time <- DF %>%
mutate(estado = toupper(stri_trans_general(estado, "Latin-ASCII"))) %>%
group_by(estado) %>%
filter(date >= as.POSIXct(time_cutoff)) %>%
filter(date == min(date)) %>%
ungroup()
brazil_map_data_time <- brazil_states %>%
left_join(DF_time, by = "estado")
plot <- ggplot(data = brazil_map_data_time) +
geom_sf(aes(fill = delta, text = paste0("Estado: ", estado, "<br>",
"Desvio: ", sprintf("%.2f%%", delta * 100)))) +
scale_fill_gradient2(
limits = delta_limits,
low = "lightgreen",
mid = "white",
high = "red",
midpoint = 0,
na.value = "grey90",
name = "Desvio (%)"
) +
theme_void() +
labs(
title = paste0(time_label, " de apuração")
) +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 10)
)
ggplotly(plot, tooltip = "text") %>%
layout(margin = list(l = 0, r = 0, b = 0, t = 30))
}
# Gerando os mapas e coletando os plots
plot1 <- generate_map(DF, "30 minutos", "2022-10-30 14:30:00", delta_limits)
plot2 <- generate_map(DF, "1 hora", "2022-10-30 15:00:00", delta_limits)
plot3 <- generate_map(DF, "2 horas", "2022-10-30 16:00:00", delta_limits)
plot4 <- generate_map(DF, "3 horas", "2022-10-30 17:00:00", delta_limits)
# Criando um plot separado para a legenda
legend_plot <- ggplot(data = brazil_map_data) +
geom_sf(aes(fill = delta)) +
scale_fill_gradient2(
limits = delta_limits,
low = "lightgreen",
mid = "white",
high = "red",
midpoint = 0,
na.value = "grey90",
name = "Desvio (%)"
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)
)
# Convertendo o plot para plotly para extrair a legenda
legend_plotly <- ggplotly(legend_plot)
# Arrumando os plots em uma grade 2x2
subplot(
plot1, plot2, plot3, plot4,
nrows = 2,
shareX = FALSE,
shareY = FALSE,
titleX = FALSE,
titleY = FALSE,
margin = 0.02
) %>%
layout(
showlegend = FALSE,
annotations = list(
list(
x = 0.5,
y = 1.05,
text = "Desvio da % Lula final ao longo do tempo",
showarrow = FALSE,
xref = 'paper',
yref = 'paper',
font = list(size = 16)
)
)
)
